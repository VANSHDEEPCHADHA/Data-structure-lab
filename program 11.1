#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the linked list
typedef struct Node {
    int data; // Data of the node
    struct Node* next; // Pointer to the next node
} Node;

// Structure to represent the queue
typedef struct Queue {
    Node* front; // Pointer to the front of the queue
    Node* rear; // Pointer to the rear of the queue
} Queue;

// Function to initialize a queue
Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));
    q->front = q->rear = NULL;
    return q;
}

// Function to check if the queue is empty
int isEmpty(Queue* q) {
    return (q->front == NULL);
}

// Function to enqueue an element into the queue
void enqueue(Queue* q, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    
    // If the queue is empty
    if (isEmpty(q)) {
        q->front = q->rear = newNode;
    } else {
        q->rear->next = newNode;
        q->rear = newNode;
    }
}

// Function to dequeue an element from the queue
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
        return -1; // Returning -1 as an indication of failure
    }

    Node* temp = q->front;
    int data = temp->data;
    q->front = q->front->next;
    free(temp);
    return data;
}

// Main function for testing
int main() {
    Queue* q = createQueue();

    // Enqueue some elements
    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 30);

    // Dequeue some elements
    printf("Dequeued: %d\n", dequeue(q));
    printf("Dequeued: %d\n", dequeue(q));

    // Enqueue more elements
    enqueue(q, 40);
    enqueue(q, 50);

    // Dequeue remaining elements
    printf("Dequeued: %d\n", dequeue(q));
    printf("Dequeued: %d\n", dequeue(q));
    
    // Trying to dequeue from an empty queue
    printf("Dequeued: %d\n", dequeue(q));

    free(q); // Clean up memory

    return 0;
}
