#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the linked list
struct Node {
    int data;
    struct Node *next;
};

// Function to insert a new node at the beginning of the list
void insertAtBeginning(struct Node **head, int newData) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    struct Node *last = *head;

    newNode->data = newData;
    newNode->next = *head;

    // If the list is empty, make the new node as head
    if (*head == NULL) {
        newNode->next = newNode;
    } else {
        // Otherwise, traverse to the last node and adjust pointers
        while (last->next != *head)
            last = last->next;
        last->next = newNode;
    }
    *head = newNode;
}

// Function to delete a node from the list
void deleteNode(struct Node **head, int key) {
    if (*head == NULL)
        return;

    struct Node *temp = *head, *prev = NULL;

    // Find the node to be deleted
    while (temp->data != key) {
        if (temp->next == *head) {
            printf("Node with data %d not found\n", key);
            return;
        }
        prev = temp;
        temp = temp->next;
    }

    // If the node to be deleted is the only node in the list
    if (temp->next == *head && prev == NULL) {
        *head = NULL;
        free(temp);
        return;
    }

    // If the node to be deleted is the first node
    if (temp == *head) {
        prev = (*head)->next;
        while (prev->next != *head)
            prev = prev->next;
        prev->next = (*head)->next;
        *head = (*head)->next;
    } else if (temp->next == *head) { // If the node to be deleted is the last node
        prev->next = *head;
        free(temp);
    } else { // If the node to be deleted is in the middle
        prev->next = temp->next;
        free(temp);
    }
}

// Function to search for a given key in the list
int search(struct Node *head, int key) {
    struct Node *current = head;

    // Traverse the list until the end is reached
    do {
        if (current->data == key)
            return 1; // Key found
        current = current->next;
    } while (current != head);

    return 0; // Key not found
}

// Function to display the circular linked list
void display(struct Node *head) {
    struct Node *temp = head;
    if (head != NULL) {
        do {
            printf("%d ", temp->data);
            temp = temp->next;
        } while (temp != head);
        printf("\n");
    }
}

// Main function to test the implemented functionalities
int main() {
    struct Node *head = NULL;

    // Insert some elements into the circular linked list
    insertAtBeginning(&head, 5);
    insertAtBeginning(&head, 4);
    insertAtBeginning(&head, 3);
    insertAtBeginning(&head, 2);
    insertAtBeginning(&head, 1);

    printf("Initial circular linked list: ");
    display(head);

    // Test deletion operation
    deleteNode(&head, 3);
    printf("After deleting 3: ");
    display(head);

    // Test linear search
    int key = 4;
    if (search(head, key))
        printf("%d found in the list\n", key);
    else
        printf("%d not found in the list\n", key);

    return 0;
}
